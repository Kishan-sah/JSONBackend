# Employee Management Application

This is an Employee Management application built using Angular 18, which demonstrates how to perform CRUD (Create, Read, Update, Delete) operations using Angular's `HttpClient` service. The project uses `json-server` to create a mock back-end for handling API requests.

## Table of Contents

- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Running the Application](#running-the-application)
- [Project Structure](#project-structure)
- [JSON Server](#json-server)
- [API Endpoints](#api-endpoints)
- [License](#license)

## Features

- **View Employee Data**: Fetch and display a list of employees.
- **Add New Employee**: Create a new employee record.
- **Update Employee Data**: Edit existing employee information.
- **Delete Employee**: Remove an employee from the database.
- **Mock API Server**: Uses `json-server` for simulating API requests and responses.

## Prerequisites

Before you begin, ensure you have the following installed:

- Node.js (v16 or above)
- npm (Node Package Manager)
- Angular CLI (v18.0.0 or above)

## Installation

1. **Clone the Repository**:

   ```bash
   git clone https://github.com/your-repository/employee-management-app.git
   cd employee-management-app

2. **Install Dependencies**:

    npm install

3. Running the Application

   • Start the JSON Server: 
        npm run json:server
   - This will start the json-server and watch the db.json file, exposing the mock API endpoints at http://localhost:3000.

   • Start the Angular Development Server:
        npm start
   - This will serve the Angular application on http://localhost:4200.

   • Access the Application:
   - Open your browser and navigate to http://localhost:4200 to view the application.

# Running the Application

    Project Structure: 
       • src/app: Contains the main Angular application files.
       • components: Includes the individual Angular components (get, post, put, patch, delete).
       • services: Contains the user.service.ts for handling API requests.
       • models: Defines the data models used in the application.
       • db.json: JSON file used by json-server to mock back-end data.
       • package.json: Defines the dependencies, scripts, and configurations for the project.

# JSON Server
    The project uses json-server to simulate a RESTful API. 
    This allows the Angular application to perform API requests as if interacting with a real back-end.

# JSON Server Configuration
    The json-server watches the db.json file and serves the data at http://localhost:3000.
    You can add, update, or delete data directly in the db.json file or through the Angular application.

# API Endpoints
    The following API endpoints are available via json-server:

       • GET /EmployeeData: Fetch all employee data.
       • POST /EmployeeData: Add a new employee.
       • PUT /EmployeeData/:id: Update an existing employee.
       • DELETE /EmployeeData/:id: Delete an employee.
